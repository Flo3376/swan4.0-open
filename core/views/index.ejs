<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <title>Configuration des Actions</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">


    <style>
        body {
            background-color: #121212;
            color: #ccc;
            /* Amélioration de la lisibilité des textes */
        }

        #leftPanel {
            height: 100vh;
            overflow-y: auto;
            border-right: 2px solid #333;
            background-color: #242424;
        }

        #rightPanel {
            height: 100vh;
            overflow-y: auto;
            background-color: #333;
        }

        .list-group-item {
            background-color: #242424;
            border-color: #444;
            color: #ccc;
            /* Assure que le texte est bien lisible */
            cursor: pointer;
            /* Indique que l'élément est cliquable */
        }

        .action-buttons button {
            color: #ccc;
            /* Couleur des icônes pour qu'elles soient visibles en mode sombre */
        }

        .tooltip-inner {
            background-color: #333;
            /* Couleur d'arrière-plan pour les infobulles */
            color: #ccc;
            /* Couleur du texte pour les infobulles */
        }
        .keyboard {
            display: flex;
            flex-direction: column;
        }

        .keyboard-row {
            display: flex;
            
            margin: 5px 0;
        }

        .key {
            padding: 10px;
            margin: 0 5px;
            width: 40px;
            text-align: center;
            cursor: pointer;
            background-color: #eee;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .key_t2 {
            padding: 10px;
            margin: 0 5px;
            width: 50px;
            text-align: center;
            cursor: pointer;
            background-color: #eee;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .key_t3 {
            padding: 10px;
            margin: 0 5px;
            width: 60px;
            text-align: center;
            cursor: pointer;
            background-color: #eee;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .key_t4 {
            padding: 10px;
            margin: 0 5px;
            width: 80px;
            text-align: center;
            cursor: pointer;
            background-color: #eee;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .key_t5 {
            padding: 10px;
            margin: 0 5px;
            width: 100px;
            text-align: center;
            cursor: pointer;
            background-color: #eee;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .spacer {
        display: inline-block;
        height: 10px; /* Hauteur pour garder l'alignement avec les touches si nécessaire */
        }

        .spacer_50 {
            width: 50px;
        }
        .spacer_40 {
            width: 37px;
        }

        .spacer_30 {
            width: 30px;
        }
        .spacer_30 {
            width: 20px;
        }

        .spacer_10 {
            width: 20px;
        }
        .modal-dialog {
    max-width: 90%; /* ou une autre largeur selon les besoins */
    height: auto;  /* ajuste la hauteur automatiquement selon le contenu */
}
    </style>
</head>

<body>
    <!-- Modal pour la configuration de Keyboard Key -->
    <div class="modal modal-xl" id="keyboardKeyModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Configuration de Touche</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="keyboard-container"></div>
                    <form id="keyConfigForm">
                        <div class="form-group">
                            <label for="keyInput">Touche:</label>
                            <input type="text" class="form-control" id="keyInput">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="saveKeyConfig()">Sauvegarder</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid h-100">
        <div class="row h-100">
            <div class="col-md-4" id="leftPanel">
                <div class="d-flex justify-content-between align-items-center p-3 mb-2 bg-dark">
                    <button class="btn btn-primary" onclick="addCard()" data-bs-toggle="tooltip"
                        data-bs-placement="bottom" title="Ajouter une action"><i class="bi bi-plus-circle"></i></button>
                    <button class="btn btn-success" onclick="saveChanges()" data-bs-toggle="tooltip"
                        data-bs-placement="bottom" title="Sauvegarder les changements"><i
                            class="bi bi-save"></i></button>
                </div>
                <ul class="list-group">
                    <% for (const key in data) { %>
                        <% if (key !=="global" && data[key].rules) { %>
                            <li class="list-group-item" onclick="showDetails('<%= key %>')">
                                <% if (data[key].rules.length> 0) { %>
                                    <%= data[key].rules[0].description %>
                                        <% } %>
                            </li>
                            <% } %>
                                <% } %>
                </ul>
            </div>

            <div class="col-md-8" id="rightPanel">
                <div id="detailsContent">
                    <h3 class="info_user">Cliquez sur une action pour voir les détails</h3>

                    <form class="rule-form" style="display: none;">
                        <h5 class="card-title"><span id="title_card"></span>&nbsp;&nbsp;||&nbsp;&nbsp;&nbsp;<button class="btn btn-success" onclick="saveCard()" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Sauvegarder la carte"><i class="bi bi-save"></i></button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteCard()" title="Supprimer la carte"><i class="bi bi-trash"></i></button>
                            <button class="btn btn-sm btn-outline-warning" onclick="duplicateCard()" title="Dupliquer la carte"><i class="bi bi-files"></i></button></h5>
                        <hr>
                        <h6>Code:</h6>
                        <input type="text" id="code" name="code" class="form-control">
                        <br>
                        <h6>Description:</h6>
                        <input type="text" id="description" name="description" class="form-control">
                        <hr>
                        <h6>Questions:</h6>
                        <textarea class="form-control mb-2 auto-height" name="questions" id="questions" rows="5"></textarea>
                        <br>
                        <h6>Réponses:</h6>
                        <textarea class="form-control mb-2 auto-height" name="responses" id="responses" rows="5"></textarea>
                        <hr>
                        <div>
                            <strong>Détails de l'interaction:</strong>
                        </div>
                        <div>
                            <strong>Output:</strong>
                            <select class="form-control mb-2 output-select" id="outputSelect" name="output">
                                <option value="none">None</option>
                                <option value="keyboard" selected="">Keyboard</option>
                                <option value="mouse">Mouse</option>
                            </select>
                        </div>
                        <div class="type-select">
                            <strong>Type:</strong>
                            <select class="form-control mb-2 type-select" id="typeSelect" name="Type">
                                <option value="none">None</option>
                                <option value="key">Key</option>
                                <option value="combo">Combo</option>
                                <option value="sequence">Sequence</option>
                                <option value="phrase">Phrase</option>
                                <option value="mouseclick" hidden="">Mouseclick</option>
                                <option value="mousemove" hidden="">Mousemove</option>
                            </select>
                        </div>
                        <div class="durationSelect">
                            <strong>Durée:</strong>
                            <select class="form-control mb-2 durationSelect" id="durationSelect" name="duration">
                                <option value="short" >Short</option>
                                <option value="long">Long</option>
                            </select>
                        </div>
                        <div class="action-Input">
                            
                            <strong>Action: <button class="btn btn-primary" id="modal_activator" data-modal-type="none"><i class="bi bi-pencil-fill"></i></button></strong>
                            <input type="text" class="form-control action-Input"  id="actionInput" name="actionInput" disabled="">
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script>
        var lexique = <%- JSON.stringify(data) %>;
        function addCard() {
            console.log("Ajouter une nouvelle action");
        }

        function saveChanges() {
            console.log("Sauvegarder les changements");
        }

        function saveCard() {
            console.log("Sauvegarder les changements", cardId);
        }

        function editCard(cardId) {
            console.log("Modifier l'action", cardId);
        }

        function deleteCard(cardId) {
            console.log("Supprimer l'action", cardId);
        }

        function duplicateCard(cardId) {
            console.log("Dupliquer l'action", cardId);
        }

        function showDetails(actionId) {
            var details = lexique[actionId];
            if (details) {
                var rules = details.rules[0]; // Assumant qu'il y a toujours au moins une règle

                // Cacher les éléments info_user
                document.querySelectorAll('.info_user').forEach(function(element) {
                    element.style.display = 'none';
                });

                // Afficher les éléments rule-form
                document.querySelectorAll('.rule-form').forEach(function(element) {
                    element.style.display = '';
                });
                document.getElementById('title_card').innerHTML = actionId;
                document.getElementById('code').value = actionId;

                if(rules.description) document.getElementById('description').value = rules.description;
                if(rules.question) document.getElementById('questions').value = rules.question.join('\n').trim();
                if(rules.responses) document.getElementById('responses').value = rules.responses.join('\n').trim();

                // Récupération de l'élément select outputSelect
                let selectElement = document.getElementById('outputSelect');

                // Détermination de la valeur à sélectionner, avec vérification de la présence de rules.interact.output
                let selectedValue = rules.interact.output ? rules.interact.output : "none";

                // Sélection de l'option
                Array.from(selectElement.options).forEach(option => {
                    option.selected = (option.value === selectedValue);
                });

                // Récupération de l'élément select typeSelect
                selectElement = document.getElementById('typeSelect');

                // Détermination de la valeur à sélectionner, avec vérification de la présence de rules.interact.output
                selectedValue = rules.interact.type ? rules.interact.type : "none";

                // Sélection de l'option
                Array.from(selectElement.options).forEach(option => {
                    option.selected = (option.value === selectedValue);
                });

                // Récupération de l'élément select durationSelect
                selectElement = document.getElementById('durationSelect');

                // Détermination de la valeur à sélectionner, avec vérification de la présence de rules.interact.output
                selectedValue = rules.interact.output ? rules.interact.duration : "short";

                // Sélection de l'option
                Array.from(selectElement.options).forEach(option => {
                    option.selected = (option.value === selectedValue);
                });

                if(rules.action) document.getElementById('actionInput').value = rules.action;
                
                updateVisibility();
            }
        }

        function updateVisibility() {
            const outputSelect = document.getElementById('outputSelect');
            const typeSelect = document.getElementById('typeSelect');
            const modalActivator = document.getElementById('modal_activator');

            const outputValue = outputSelect.value;
            const typeValue = typeSelect.value;

            console.log(outputValue)
            switch (outputValue) {
                case 'none':
                    var elements = document.querySelectorAll('.type-select, .durationSelect, .action-Input');
                    elements.forEach(element => {
                        element.style.display = 'none'; // Manipule chaque élément ayant la classe 'some-class'
                    });

                    // Forcer les valeurs
                    document.getElementById('typeSelect').value = 'none';
                    document.getElementById('durationSelect').value = 'none';
                    document.getElementById('actionInput').value = '';
                    modalActivator.setAttribute('data-modal-type', 'none');
                    break;
                case 'keyboard':
                    var elements = document.querySelectorAll('.type-select, .durationSelect, .action-Input');
                    elements.forEach(element => {
                        element.style.display = ''; // Manipule chaque élément ayant la classe 'some-class'
                    });

                    // Filtre des options peut être ajouté ici
                    filterTypeOptions(outputValue); // Appel à la fonction de filtrage des options

                    console.log(typeValue)

                    // Déterminer quel modal ouvrir basé sur le type spécifique de clavier
                    if (typeValue === 'key' || typeValue === 'combo' || typeValue === 'sequence' || typeValue === 'phrase') {
                        modalActivator.setAttribute('data-modal-type', 'keyboard_' + typeValue);
                    }

                    break;
                case 'mouse':
                    var elements = document.querySelectorAll('.type-select, .durationSelect, .action-Input');
                    elements.forEach(element => {
                        element.style.display = ''; // Manipule chaque élément ayant la classe 'some-class'
                    });

                    // Filtre des options peut être ajouté ici
                    filterTypeOptions(outputValue); // Appel à la fonction de filtrage des options

                    // Modifier pour les types de souris
                    if (typeValue === 'mouseclick' || typeValue === 'mousemove') {
                        modalActivator.setAttribute('data-modal-type', 'mouse_' + typeValue);
                    }

                    break;
            }
        }

        

        function filterTypeOptions(output) {
            const typeSelect = document.getElementById('typeSelect');
            const options = typeSelect.options;

            for (let option of options) {
                // Masquer les options qui ne correspondent pas à l'output sélectionné
                if (output === 'keyboard' && (option.value.includes('mouse'))) {
                    option.hidden = true;
                } else if (output === 'mouse' && !option.value.includes('mouse')) {
                    option.hidden = true;
                } else {
                    option.hidden = false;
                }
            }
        }

        function openModalBasedOnType(modalType) {
            switch (modalType) {
                case 'keyboard_key':
                    $('#keyboardKeyModal').modal('show');
                    openKeyboardModal();
                    break;
                case 'combo':
                    $('#keyboardComboModal').modal('show');
                    break;
                case 'sequence':
                    $('#keyboardSequenceModal').modal('show');
                    break;
                case 'phrase':
                    $('#keyboardPhraseModal').modal('show');
                    break;
                case 'mouseclick':
                    $('#mouseClickModal').modal('show');
                    break;
                case 'mousemove':
                    $('#mouseMoveModal').modal('show');
                    break;
                default:
                    console.log('No modal associated with this type : ' +modalType);
                    break;
            }
        }

        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('outputSelect').addEventListener('change', updateVisibility);
        document.getElementById('typeSelect').addEventListener('change', updateVisibility);


            var modalActivator = document.getElementById('modal_activator');
            if (modalActivator) {
                modalActivator.addEventListener('click', function () {
                    var modalType = this.getAttribute('data-modal-type');
                    openModalBasedOnType(modalType);
                });
            } else {
                console.error('Modal activator button not found');
            }
        });
        document.querySelector('.rule-form').addEventListener('submit', function(event) {
            event.preventDefault();  // Empêche la soumission du formulaire
            // Vous pouvez ajouter ici d'autres logiques
        });
        function openKeyboardModal() {
            const keyboardHtml = document.getElementById('keyboard-template').innerHTML;
            document.getElementById('keyboard-container').innerHTML = keyboardHtml;
            $('#keyboardModal').modal('show');
        }
    </script>
    <script type="text/template" id="keyboard-template">
        <div class="keyboard">
            <div class="keyboard-row">
                <button class="key">ESC</button>
                <div class="spacer spacer_40"></div> <!-- Espace de 50px -->
                <button class="key">F1</button>
                <button class="key">F2</button>
                <button class="key">F3</button>
                <button class="key">F4</button>
                <div class="spacer spacer_40"></div> <!-- Espace de 50px -->
                <button class="key">F5</button>
                <button class="key">F6</button>
                <button class="key">F7</button>
                <button class="key">F8</button>
                <div class="spacer spacer_40"></div> <!-- Espace de 50px -->
                <button class="key">F9</button>
                <button class="key">F10</button>
                <button class="key">F11</button>
                <button class="key">F12</button>
                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                <button class="key">PRT</button>
                <button class="key">AD</button>
                <button class="key">PA</button>
            </div><br>
            <div class="keyboard-row">
                <button class="key">²</button>
                <button class="key">1</button>
                <button class="key">2</button>
                <button class="key">3</button>
                <button class="key">4</button>
                <button class="key">5</button>
                <button class="key">6</button>
                <button class="key">7</button>
                <button class="key">8</button>
                <button class="key">9</button>
                <button class="key">0</button>
                <button class="key">°</button>
                <button class="key">+</button>
                <button class="key_t5"><i class="bi bi-backspace"></i></button>
                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                <button class="key">INS</button>
                <button class="key"><i class="bi bi-house"></i></button>
                <button class="key"><i class="bi bi-arrow-up-square-fill"></i></button>
            </div>
            <div class="keyboard-row">
                <button class="key_t3">tab</button>
                <button class="key">A</button>
                <button class="key">Z</button>
                <button class="key">E</button>
                <button class="key">R</button>
                <button class="key">T</button>
                <button class="key">Y</button>
                <button class="key">U</button>
                <button class="key">I</button>
                <button class="key">O</button>
                <button class="key">P</button>
                <button class="key">^</button>
                <button class="key">$</button>
                <button class="key_t4">ENTER</button>
                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                <button class="key">SUP</button>
                <button class="key">FIN</button>
                <button class="key"><i class="bi bi-arrow-down-square-fill"></i></button>
                
                <!-- Ajoutez d'autres touches -->
            </div>
            <div class="keyboard-row">
                <button class="key_t4">MAJ</button>
                <button class="key">Q</button>
                <button class="key">S</button>
                <button class="key">D</button>
                <button class="key">F</button>
                <button class="key">G</button>
                <button class="key">H</button>
                <button class="key">J</button>
                <button class="key">K</button>
                <button class="key">L</button>
                <button class="key">M</button>
                <button class="key">ù</button>
                <button class="key">*</button>
                
                <!-- Ajoutez d'autres touches -->
            </div>
            <!-- Plus de lignes selon nécessaire -->
        </div>
    </script>
</body>

</html>