<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <title>Configuration des Actions</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/lexique.css">
</head>

<body>
    <!-- Modal pour la configuration de Keyboard Key -->
    <div class="modal modal-xl" id="keyboard_Modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Configuration de Touche</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="keyboard-container">
                        <div class="keyboard">
                            <div class="keyboard-row keyboard_select_display">
                                <button class="key" key_code="27" key_translate="Escape">ESC</button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 50px -->
                                <button class="key" key_code="112" key_translate="F1">F1</button>
                                <button class="key" key_code="113" key_translate="F2">F2</button>
                                <button class="key" key_code="114" key_translate="F3">F3</button>
                                <button class="key" key_code="115" key_translate="F4">F4</button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 50px -->
                                <button class="key" key_code="116" key_translate="F5">F5</button>
                                <button class="key" key_code="117" key_translate="F6">F6</button>
                                <button class="key" key_code="118" key_translate="F7">F7</button>
                                <button class="key" key_code="119" key_translate="F8">F8</button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 50px -->
                                <button class="key" key_code="120" key_translate="F9">F9</button>
                                <button class="key" key_code="121" key_translate="F10">F10</button>
                                <button class="key" key_code="122" key_translate="F11">F11</button>
                                <button class="key" key_code="123" key_translate="F12">F12</button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="44" key_translate="Print_screen">PRT</button>
                                <button class="key" key_code="145" key_translate="Scroll_lock ">AD</button>
                                <button class="key" key_code="19" key_translate="Pause">PA</button>
                            </div>
                            <br>
                            <div class="keyboard-row keyboard_select_display">
                                <button class="key" key_code="222" key_translate="²">²</button>
                                <button class="key" key_code="49" key_translate="1">1</button>
                                <button class="key" key_code="50" key_translate="2">2</button>
                                <button class="key" key_code="51" key_translate="3">3</button>
                                <button class="key" key_code="52" key_translate="4">4</button>
                                <button class="key" key_code="53" key_translate="5">5</button>
                                <button class="key" key_code="54" key_translate="6">6</button>
                                <button class="key" key_code="55" key_translate="7">7</button>
                                <button class="key" key_code="56" key_translate="8">8</button>
                                <button class="key" key_code="57" key_translate="9">9</button>
                                <button class="key" key_code="48" key_translate="0">0</button>
                                <button class="key" key_code="219" key_translate="Degree">°</button>
                                <button class="key" key_code="187" key_translate="Plus">+</button>
                                <button class="key key_t5" key_code="8" key_translate="Backspace"><i
                                        class="bi bi-backspace"></i></button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="45" key_translate="Insert">INS</button>
                                <button class="key" key_code="36" key_translate="Home"><i
                                        class="bi bi-house"></i></button>
                                <button class="key" key_code="33" key_translate="Page_up"><i
                                        class="bi bi-arrow-up-square-fill"></i></button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="144" key_translate="NUMPAD_lock"><i
                                        class="bi bi-file-lock"></i></button>
                                <button class="key" key_code="111" key_translate="NUMPAD_divide">/</button>
                                <button class="key" key_code="106" key_translate="NUMPAD_multiply">*</button>
                                <button class="key" key_code="109" key_translate="NUMPAD_subtract">-</button>
                            </div>

                            <div class="keyboard-row keyboard_select_display">
                                <button class="key key_t3" key_code="9" key_translate="Tab">tab</button>
                                <button class="key" key_code="65" key_translate="A">A</button>
                                <button class="key" key_code="90" key_translate="Z">Z</button>
                                <button class="key" key_code="69" key_translate="E">E</button>
                                <button class="key" key_code="82" key_translate="R">R</button>
                                <button class="key" key_code="84" key_translate="T">T</button>
                                <button class="key" key_code="89" key_translate="Y">Y</button>
                                <button class="key" key_code="85" key_translate="U">U</button>
                                <button class="key" key_code="73" key_translate="I">I</button>
                                <button class="key" key_code="79" key_translate="O">O</button>
                                <button class="key" key_code="80" key_translate="P">P</button>
                                <button class="key" key_code="221" key_translate="Caret">^</button>
                                <button class="key" key_code="186" key_translate="Dollar">$</button>
                                <button class="key key_t4" key_code="13" key_translate="Enter">ENTER</button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="46" key_translate="Delete">SUP</button>
                                <button class="key" key_code="35" key_translate="End">FIN</button>
                                <button class="key" key_code="34" key_translate="Page_Down"><i
                                        class="bi bi-arrow-down-square-fill"></i></button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="103" key_translate="NUMPAD_7">7</button>
                                <button class="key" key_code="104" key_translate="NUMPAD_8">8</button>
                                <button class="key" key_code="105" key_translate="NUMPAD_9">9</button>
                                <button class="key" key_code="107" key_translate="NUMPAD_plus">+</button>
                            </div>
                            <div class="keyboard-row keyboard_select_display">
                                <button class="key key_t4" key_code="107" key_translate="Maj">MAJ</button>
                                <button class="key" key_code="81" key_translate="Q">Q</button>
                                <button class="key" key_code="83" key_translate="S">S</button>
                                <button class="key" key_code="68" key_translate="D">D</button>
                                <button class="key" key_code="70" key_translate="F">F</button>
                                <button class="key" key_code="71" key_translate="G">G</button>
                                <button class="key" key_code="72" key_translate="H">H</button>
                                <button class="key" key_code="74" key_translate="J">J</button>
                                <button class="key" key_code="75" key_translate="K">K</button>
                                <button class="key" key_code="76" key_translate="L">L</button>
                                <button class="key" key_code="77" key_translate="M">M</button>
                                <button class="key" key_code="192" key_translate="Ù">ù</button>
                                <button class="key" key_code="220" key_translate="Asterisk">*</button>
                                <div class="spacer spacer_295"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="100" key_translate="NUMPAD_4">4</button>
                                <button class="key" key_code="101" key_translate="NUMPAD_5">5</button>
                                <button class="key" key_code="102" key_translate="NUMPAD_6">6</button>
                            </div>
                            <div class="keyboard-row keyboard_select_display">
                                <button class="key key_t2" key_code="" key_translate="Left_shift"
                                    data-modifier="true"><i class="bi bi-shift-fill"></i></button>
                                <button class="key" key_code="226" key_translate="Greater_than">></button>
                                <button class="key" key_code="87" key_translate="W">W</button>
                                <button class="key" key_code="88" key_translate="X">X</button>
                                <button class="key" key_code="67" key_translate="C">C</button>
                                <button class="key" key_code="86" key_translate="V">V</button>
                                <button class="key" key_code="66" key_translate="B">B</button>
                                <button class="key" key_code="78" key_translate="N">N</button>
                                <button class="key" key_code="188" key_translate="Comma">,</button>
                                <button class="key" key_code="190" key_translate="Period">.</button>
                                <button class="key" key_code="191" key_translate="Slash">/</button>
                                <button class="key" key_code="223" key_translate="Exclamation">!</button>
                                <button class="key key_t6" key_code="" key_translate="Right_shift"
                                    data-modifier="true"><i class="bi bi-shift-fill"></i></button>
                                <div class="spacer spacer_90"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="38" key_translate="Arrow_up"><i
                                        class="bi bi-arrow-up-square-fill"></i></button>
                                <div class="spacer spacer_90"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="97" key_translate="NUMPAD_1">1</button>
                                <button class="key" key_code="98" key_translate="NUMPAD_2">2</button>
                                <button class="key" key_code="99" key_translate="NUMPAD_3">3</button>
                            </div>

                            <div class="keyboard-row keyboard_select_display">
                                <button class="key key_t3" key_code="" key_translate="Left_control"
                                    data-modifier="true">CTRL</button>
                                <button class="key" key_code="" key_translate="Windows" data-modifier="true"><i
                                        class="bi bi-windows"></i></button>
                                <button class="key key_t3" key_code="" key_translate="Left_alt"
                                    data-modifier="true">ALT</button>
                                <button class="key key_t7" key_code="32" key_translate="Space"></button>
                                <button class="key key_t3" key_code="" key_translate="Right_alt"
                                    data-modifier="true">ALT</button>
                                <button class="key_forbiden" key_code="" key_translate="Function">FN</button>
                                <button class="key" key_code="" key_translate="Menu"><i
                                        class="bi bi-menu-button-wide-fill"></i></button>
                                <button class="key key_t3" key_code="" key_translate="Right_control"
                                    data-modifier="true">CTRL</button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                                <button class="key" key_code="37" key_translate="Arrow_left"><i
                                        class="bi bi-arrow-left-square-fill"></i></button>
                                <button class="key" key_code="40" key_translate="Arrow_down"><i
                                        class="bi bi-arrow-down-square-fill"></i></button>
                                <button class="key" key_code="39" key_translate="Arrow_right"><i
                                        class="bi bi-arrow-right-square-fill"></i></button>
                                <div class="spacer spacer_40"></div> <!-- Espace de 30px -->
                                <button class="key key_t8" key_code="96" key_translate="NUMPAD_0">0</button>
                                <button class="key" key_code="110" key_translate="NUMPAD_oeriod">.</button>
                                <button class="key" key_code="13" key_translate="NUMPAD_enter"><i
                                        class="bi bi-arrow-return-left"></i></button>
                            </div>
                            <hr>
                            <div class="keyboard-row mouse_select_display">
                                <button class="key key_t6" key_translate="Left_click">Clique Gauche</button>
                                <button class="key key_t6" key_translate="Center_click">Clique Molette</button>
                                <button class="key key_t6" key_translate="Right_click">Clique Droit</button>
                            </div>
                            <hr>

                        </div>
                    </div>
                    <form id="keyConfigForm">
                        <div class="form-group">
                            <label for="keyInput">Touche:</label>
                            <input type="text" class="form-control" id="keyInput">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="updateKeyInput()"
                        data-bs-dismiss="modal">Sauvegarder</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Confirmation de Suppression -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirmer la Suppression</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Êtes-vous sûr de vouloir supprimer cette carte ? Cette action est irréversible.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-danger" onclick="confirmDelete()">Supprimer</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal pour importer une commande -->
    <div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
        <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
            <h5 class="modal-title" id="importModalLabel">Importer une Commande</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            <p>Collez ici le JSON de la commande que vous souhaitez importer.</p>
            <textarea id="jsonInput" class="form-control" rows="5"></textarea>
            </div>
            <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
            <button type="button" class="btn btn-primary" onclick="importJson()">Importer</button>
            </div>
        </div>
        </div>
    </div>

    <div class="container-fluid h-100">
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
            <div id="copyToast" class="toast hide toast-dark" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header">
                <strong class="me-auto">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
              <div class="toast-body" id="message_corps">
                
              </div>
            </div>
          </div>
        <div class="row h-100">
            <div class="col-md-4" id="leftPanel">
                <div class=" bg-dark">
                    <button class="btn btn-primary" onclick="addCard()" data-bs-toggle="tooltip" data-bs-placement="bottom">
                        <i class="bi bi-plus-circle"></i> Ajouter une action
                    </button>
                    <button class="btn btn-success" onclick="save_lexique()" data-bs-toggle="tooltip" data-bs-placement="bottom">
                        <i class="bi bi-save"></i> Sauvegarder le fichier
                    </button>
                     <button class="btn btn-export"  data-bs-toggle="tooltip" data-bs-placement="bottom">
                        <i class="bi bi-box-arrow-in-down"></i> Importer une commande
                    </button>

                </div>
                <div id="card_list">

                </div>

            </div>

            <div class="col-md-8" id="rightPanel">
                <div id="detailsContent">
                    <h3 class="info_user">Cliquez sur une action pour voir les détails</h3>

                    <form class="rule-form" style="display: none;">
                        <h5 class="card-title"><span id="title_card"></span>&nbsp;&nbsp;||&nbsp;&nbsp;&nbsp;<button
                                class="btn btn-success" onclick="saveCard()" data-bs-toggle="tooltip"
                                data-bs-placement="bottom" ><i
                                    class="bi bi-save"></i> Sauvegarder la carte</button>
                            <button class="btn btn-danger" onclick="deleteCard()"
                                title="Supprimer la carte"><i class="bi bi-trash"></i> Détruire la carte</button>
                            <button class="btn btn-export" onclick="exportToJsonAndCopy()">
                                <i class="bi bi-box-arrow-up"></i> Exporter
                            </button>
                        </h5>
                        <hr>
                        <h6>Code:</h6>
                        <input type="text" id="code" name="code" class="form-control" disabled>
                        <br>
                        <h6>Description:</h6>
                        <input type="text" id="description" name="description" class="form-control">
                        <hr>
                        <h6>Questions:</h6>
                        <textarea class="form-control mb-2 auto-height" name="questions" id="questions"
                            rows="5"></textarea>
                        <br>
                        <h6>Réponses:</h6>
                        <textarea class="form-control mb-2 auto-height" name="responses" id="responses"
                            rows="5"></textarea>
                        <hr>
                        <div>
                            <strong>Détails de l'interaction:</strong>
                        </div>
                        <div>
                            <strong>Output:</strong>
                            <select class="form-control mb-2 output-select" id="outputSelect" name="output">
                                <option value="none">None</option>
                                <option value="keyboard" selected="">Keyboard</option>
                                <option value="mouse">Mouse</option>
                            </select>
                        </div>
                        <div class="type-select">
                            <strong>Type:</strong>
                            <select class="form-control mb-2 type-select" id="typeSelect" name="Type">
                                <option value="none">None</option>
                                <option value="key">Key</option>
                                <option value="combo">Combo</option>
                                <option value="sequence">Sequence</option>
                                <option value="phrase">Phrase</option>
                                <option value="mouse_click" hidden="">Mouse_click</option>
                                <option value="mouse_move" hidden="">Mouse_move</option>
                            </select>
                        </div>
                        <div class="durationSelect">
                            <strong>Durée:</strong>
                            <select class="form-control mb-2 durationSelect" id="durationSelect" name="duration">
                                <option value="short">Short</option>
                                <option value="long">Long</option>
                            </select>
                        </div>
                        <div class="action-Input">

                            <strong>Action: <button class="btn btn-primary" id="modal_activator"
                                    data-modal-type="none"><i class="bi bi-pencil-fill"></i></button></strong>
                            <input type="text" class="form-control action-Input" id="actionInput" name="actionInput"
                                disabled="">
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script>
        var lexique = <%- JSON.stringify(data) %>;
        refresh_cards();
        var typeValue = "";
        var actual_code_cards = "";

        const modifierPriority = {
            'Left Control': 1,
            'Left Alt': 2,
            'Left Shift': 3,
            'Right  Control': 4,
            'Right  Alt': 5,
            'Right Shift': 6
        };

        document.addEventListener('DOMContentLoaded', function () {
            // Ajout des écouteurs pour les sélections des options
            document.getElementById('outputSelect').addEventListener('change', updateVisibility);
            document.getElementById('typeSelect').addEventListener('change', updateVisibility);

            // Ajout des écouteurs pour les actions du formulaire
            document.querySelector('.rule-form').addEventListener('submit', function (event) {
                event.preventDefault(); // Empêche la soumission du formulaire
                // Implémentez ici des logiques supplémentaires si nécessaire
            });

            // Initialisation des tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            const keys = document.querySelectorAll('.key');
            keys.forEach(key => {
                key.removeEventListener('click', handleKeyClick);
                key.addEventListener('click', handleKeyClick);
            });

            document.querySelector('.btn-export').addEventListener('click', function() {
            $('#importModal').modal('show');
            });


        });

        document.getElementById('modal_activator').addEventListener('click', function () {
            console.log("modal")
            var modalType = this.getAttribute('data-modal-type');

            //remise à zero du clavier
            document.querySelectorAll('.key').forEach(k => k.classList.remove('key-active'));
            document.getElementById('keyInput').value = "";

            var modalElement = document.getElementById('keyboard_Modal');
            var myModal = new bootstrap.Modal(modalElement);
            myModal.show();
        });

        function addCard() {
            actual_code_cards = "";
            document.getElementById('code').disabled = false;
            // Gérer l'affichage des éléments UI
            document.querySelectorAll('.info_user').forEach(el => el.style.display = 'none');
            document.querySelectorAll('.rule-form').forEach(el => el.style.display = '');

            document.getElementById("code").value = "";
            document.getElementById("description").value = "";
            document.getElementById("questions").value = "";
            document.getElementById("responses").value = "";
            document.getElementById('outputSelect').value = 'none';
            updateVisibility();
        }

        function importJson() {
            const jsonInput = document.getElementById('jsonInput').value;
            try {
                const data = JSON.parse(jsonInput);
                // Validation supplémentaire du JSON si nécessaire
                if (validateJson(data)) {
                // Fermer la modal d'importation
                $('#importModal').modal('hide');

                // Préparer l'interface pour une nouvelle saisie
                addCard();

                // Pré-remplir les champs avec les données importées
                populateCardFields(data);
                
                console.log('Données importées et prêtes à être éditées:', data);
                } else {
                alert('Le JSON collé est invalide ou incomplet.');
                }
            } catch (e) {
                alert('Erreur lors de l\'analyse du JSON: ' + e.message);
            }
        }

        function populateCardFields(data) {
            if (data && data.rules && data.rules.length > 0) {
                const rule = data.rules[0];
                document.getElementById("code").value = data.root || '';
                document.getElementById("description").value = rule.description || '';
                document.getElementById("questions").value = rule.questions.join('\n') || '';
                document.getElementById("responses").value = rule.responses.join('\n') || '';
                document.getElementById("outputSelect").value = rule.interact.output || 'none';
                document.getElementById("typeSelect").value = rule.interact.type || 'none';
                document.getElementById("durationSelect").value = rule.interact.duration || 'none';
                document.getElementById("actionInput").value = rule.interact.action_input || '';
                updateVisibility(); // Mise à jour de l'affichage en fonction des sélections
            }
        }

        function validateJson(data) {
            // Vérifier que le JSON contient les champs nécessaires
            return data && data.rules && data.rules.length > 0 &&
                    data.rules[0].description && data.rules[0].questions &&
                    data.rules[0].responses && data.rules[0].interact;
        }

        function refresh_cards() {
            actual_code_cards = "";
            document.getElementById("card_list").value = "";
            let htmlCardList = "<ul class='list-group'>";
            for (const key in lexique) {
                if (key !== "global" && lexique[key].rules) {
                    if (lexique[key].rules.length > 0) {
                        htmlCardList += `<li class="list-group-item" data-card-id="${key}" onclick='showDetails("${key}")''>${lexique[key].rules[0].description}</li>`;
                    }
                }
            }

            htmlCardList += "</ul>";
            document.getElementById("card_list").innerHTML = htmlCardList;
        }

        function saveCard() {
            let cardCode = document.getElementById('code').value.trim();

            // Normalisation de la clé
            cardCode = cardCode.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');

            // Vérification que la clé n'est pas vide
            if (!cardCode) {
                alert("Le code de la carte ne peut pas être vide.");
                console.error("Le code de la carte est vide.");
                return; // Stoppe l'exécution de la fonction si la clé est vide
            }

            console.log("Sauvegarder les changements pour la carte:", cardCode);

            let outputValue = document.getElementById('outputSelect').value;
            let interact = { output: outputValue };

            let isNewCard = !(cardCode in lexique);

            if (isNewCard) {
                console.log("Création d'une nouvelle carte.");
            } else {
                console.log("Mise à jour d'une carte existante.");
            }

            if (outputValue !== "none") {
                interact.type = document.getElementById('typeSelect').value;
                interact.action_input = document.getElementById('actionInput').value;
                interact.duration = document.getElementById('durationSelect').value;
            }

            let card = {
                root: cardCode,
                rules: [{
                    action: cardCode,
                    description: document.getElementById('description').value,
                    questions: document.getElementById('questions').value.split("\n"),
                    responses: document.getElementById('responses').value.split("\n"),
                    interact: interact
                }]
            };

            lexique[cardCode] = card;
            console.log("Carte sauvegardée :", card);
            document.getElementById('message_corps').innerHTML = "Carte enregistrée. Pensez à sauvegarder sur l'onglet de gauche";
            showCopyToast(); // Affiche un toast pour informer l'utilisateur de la sauvegarde
            refresh_cards();

            //save_lexique();  // Décommentez pour appeler la fonction qui sauvegarde les données sur le serveur
        }

        function save_lexique() {
            const url = '/update_lexique'; // Remplacez par l'URL du serveur qui gère la sauvegarde

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(lexique)
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Succès:', data);
                })
                .catch((error) => {
                    console.error('Erreur:', error);
                });
        }

        function editCard(cardId) {
            console.log("Modifier l'action", cardId);
        }

        function deleteCard() {
            // Ouvrir la modal de confirmation
            $('#deleteConfirmationModal').modal('show');
        }

        function confirmDelete() {
            if (actual_code_cards && lexique[actual_code_cards]) {
                // Supprimer la carte du lexique
                delete lexique[actual_code_cards];
                console.log("Carte supprimée :", actual_code_cards);

                // Mettre à jour l'affichage des cartes
                refresh_cards();

                // Fermer la modal
                $('#deleteConfirmationModal').modal('hide');

                // Afficher une notification de succès
                document.getElementById('message_corps').innerHTML = "Carte supprimée avec succès.";
                showCopyToast();
            } else {
                console.error("Erreur : La carte à supprimer n'existe pas.");
            }
        }

        function duplicateCard(cardId) {
            console.log("Dupliquer l'action", cardId);
        }

        function showDetails(actionId) {
            actual_code_cards = actionId;
            var details = lexique[actionId];
            if (details) {

                // Mise en évidence de la carte active dans la liste de gauche
                document.querySelectorAll('.list-group-item').forEach(item => {
                    if (item.getAttribute('data-card-id') === actionId) {
                        item.classList.add('active-card');
                    } else {
                        item.classList.remove('active-card');
                    }
                });
                var rules = details.rules[0];

                // Gérer l'affichage des éléments UI
                document.querySelectorAll('.info_user').forEach(el => el.style.display = 'none');
                document.querySelectorAll('.rule-form').forEach(el => el.style.display = '');

                // Mettre à jour les champs du formulaire
                document.getElementById('title_card').textContent = actionId;
                document.getElementById('code').value = actionId;
                document.getElementById('code').disabled = true;
                ['description', 'questions', 'responses'].forEach(field => {
                    //console.log(field, rules[field]);  // Affiche la structure des données dans la console
                    if (rules[field]) {
                        if (Array.isArray(rules[field])) {
                            document.getElementById(field).value = rules[field].join('\n').trim();
                        } else {
                            document.getElementById(field).value = rules[field].trim();
                        }
                    }
                });

                // Mettre à jour les sélections des listes déroulantes
                ['output', 'type', 'duration'].forEach(attr => {
                    let selectValue = rules.interact[attr] || "none";
                    let selectElement = document.getElementById(attr + 'Select');
                    Array.from(selectElement.options).forEach(option => {
                        option.selected = (option.value === selectValue);
                    });
                });

                document.getElementById('actionInput').value = rules.interact && rules.interact.action_input ? rules.interact.action_input : '';

                updateVisibility();
            }
        }

        function updateVisibility() {
            const outputValue = document.getElementById('outputSelect').value;
            typeValue = document.getElementById('typeSelect').value;

            // Afficher ou masquer les sections appropriées en fonction de l'output
            if (outputValue === 'none') {
                document.querySelectorAll('.type-select, .durationSelect, .action-Input').forEach(el => {
                    el.style.display = 'none';
                });
                document.querySelectorAll('.keyboard_select_display, .mouse_select_display').forEach(el => el.style.display = 'none');
            } else {
                document.querySelectorAll('.type-select, .durationSelect, .action-Input').forEach(el => {
                    el.style.display = '';
                });

                if (outputValue === 'keyboard') {
                    document.querySelectorAll('.mouse_select_display').forEach(el => el.style.display = 'none');
                    document.querySelectorAll('.keyboard_select_display').forEach(el => el.style.display = '');
                } else if (outputValue === 'mouse') {
                    document.querySelectorAll('.keyboard_select_display').forEach(el => el.style.display = 'none');
                    document.querySelectorAll('.mouse_select_display').forEach(el => el.style.display = '');
                }
            }

            // Verrouillage/Déverrouillage du champ keyInput basé sur le type
            const keyInput = document.getElementById('keyInput');
            keyInput.disabled = (typeValue !== 'phrase');  // Déverrouille si 'phrase', sinon verrouille

            // Filtrer les options disponibles dans le select de type
            filterTypeOptions(outputValue);

            // Déterminer le type de modal à afficher basé sur l'output et le type sélectionné
            let modalType = 'none';  // valeur par défaut pour 'none'
            if (outputValue === 'keyboard') {
                modalType = 'keyboard_' + typeValue;  // modal spécifique pour les types de clavier
            } else if (outputValue === 'mouse') {
                modalType = 'mouse_' + typeValue;  // modal spécifique pour les types de souris
            }

            // Mettre à jour l'attribut de la modal pour refléter le type actuel
            document.getElementById('modal_activator').setAttribute('data-modal-type', modalType);
        }

        function filterTypeOptions(output) {
            const typeSelect = document.getElementById('typeSelect');
            Array.from(typeSelect.options).forEach(option => {
                if (output === 'keyboard') {
                    option.hidden = option.classList.contains('mouse-option');
                } else if (output === 'mouse') {
                    option.hidden = option.classList.contains('keyboard-option');
                } else {
                    option.hidden = false;
                }
            });
        }

        function updateKeyInput() {
            document.getElementById('actionInput').value = document.getElementById('keyInput').value;
        }

        function handleKeyClick() {
            const keyInput = document.getElementById('keyInput');
            const keyTranslate = this.getAttribute('key_translate');
            if (typeValue === "phrase") {
                let inputElement = document.getElementById('keyInput');
                let currentText = inputElement.value;
                // Étape 1: Supprimer les anciennes balises
                let cleanedText = currentText.replace(/\{[^}]*\}/g, '').trim();
                 // Étape 2: Ajouter la nouvelle balise pour la touche cliquée
                let keyTranslate = this.getAttribute('key_translate');
                let formattedKey = `{${keyTranslate}}`;

                keyInput.value=`{${keyTranslate}}${cleanedText}{${keyTranslate}}`
            }
            else{
                // Gestion du mode "key" pour une touche unique
                if (typeValue === "key") {
                    document.querySelectorAll('.key').forEach(k => k.classList.remove('key-active'));
                    this.classList.add('key-active');
                    document.getElementById('keyInput').value = `{${this.getAttribute('key_translate')}}`;
                    //updateKeyInput();
                }
                // Gestion du mode "combo" pour des combinaisons de touches
                else if (typeValue === "combo") {
                    this.classList.toggle('key-active');
                    updateComboInput();
                }
                else if (typeValue === "mouse_click") {
                    document.querySelectorAll('.key').forEach(k => k.classList.remove('key-active'));
                    this.classList.add('key-active');
                    document.getElementById('keyInput').value = `{${this.getAttribute('key_translate')}}`;
                    //updateKeyInput();
                }
            }

            
        }

        function updateComboInput() {
            const activeKeys = Array.from(document.querySelectorAll('.key.key-active'));
            const modifiers = activeKeys.filter(key => key.hasAttribute('data-modifier'));

            // Trier les modificateurs selon la carte de priorité
            modifiers.sort((a, b) => {
                const aPriority = modifierPriority[a.getAttribute('key_translate')] || 999;
                const bPriority = modifierPriority[b.getAttribute('key_translate')] || 999;
                return aPriority - bPriority;
            });

            const nonModifiers = activeKeys.filter(key => !key.hasAttribute('data-modifier'));

            // Combinez d'abord les modificateurs triés, puis les non-modificateurs
            const keyInput = document.getElementById('keyInput');
            if (keyInput) {
                keyInput.value = [...modifiers, ...nonModifiers]
                    .map(key => `{${key.getAttribute('key_translate')}}`) // Modification ici pour entourer chaque touche de accolades
                    .join('');
            }

        }
        
        function showCopyToast() {
            var toastEl = document.getElementById('copyToast');
            var toast = new bootstrap.Toast(toastEl);
            toast.show();
        }
                
        function exportToJsonAndCopy() {
            const currentCardDetails = lexique[actual_code_cards];

            if (!currentCardDetails) {
                console.error("Aucune carte sélectionnée ou détails manquants.");
                return;
            }

            // Convertir les détails de la carte en chaîne JSON
            const jsonStr = JSON.stringify(currentCardDetails, null, 2); // Formatage joli du JSON

            // Créer le message à copier
            const message = `✨ **Commande à Partager** ✨\n\n` +
                `🔑 **Clé de Commande :** ${currentCardDetails.root || 'Non Spécifiée'}\n` +
                `📜 **Description :** ${currentCardDetails.rules[0].description || 'Aucune description disponible.'}\n\n` +
                `📝 **Détails de Configuration :**\n\`\`\`${jsonStr}\`\`\`\n` +
                `**N'hésitez pas à personnaliser selon vos besoins!**`;

            // Copier dans le presse-papiers
            navigator.clipboard.writeText(message).then(() => {
                console.log("Les détails de la carte ont été copiés dans le presse-papiers avec un message enrichi.");
                document.getElementById('message_corps').innerHTML = "Les détails de la carte ont été copiés dans le presse-papiers.";
                showCopyToast();  // Affiche un toast pour informer l'utilisateur que la copie a réussi
            }).catch(err => {
                console.error("Erreur lors de la copie dans le presse-papiers:", err);
            });
        }
    </script>
</body>

</html>